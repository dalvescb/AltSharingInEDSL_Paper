* Header :ignore:
# -*- mode: org; -*-



#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js@3.9.0
#+REVEAL_VERSION: 3.9.0
#+REVEAL_THEME: sky

#+OPTIONS: reveal_title_slide:auto num:nil toc:nil timestamp:nil

#+MACRO: caption @@html:<h1 style="font-size:70px; color:#4E03FC">$1</h1>@@
#+MACRO: captiontiny @@html:<h1 style="font-size:30px">$1</h1>@@
#+MACRO: alert @@html:<font color="#4E03FC">$1</font>@@

#+REVEAL_EXTRA_CSS: ./reveal_extra.css
# add a reveal_extra.css to the current directory (use snippet reveal_css)
# To load Org-reveal, type “M-x load-library”, then type “ox-reveal”.


#+Title: {{{caption(Alternative Methods for Retaining Explicit and Finding Implicit Sharing in Embedded DSLs)}}}
#+DATE: {{{captiontiny(2022-01-15)}}}
#+AUTHOR: {{{captiontiny(Curtis D'Alves)}}}

* {{{caption(Overview)}}}
 
+ I'm going to present a {{{alert(new method for detecting sharing)}}} in embedded DSLs
  * I'll start by giving a {{{alert(small example)}}} of an embedded DSL
  * Identify the {{{alert(sharing problem)}}} that occurs
  * Present {{{alert(current solutions)}}} with their advantages/shortcomings
  * Explain my {{{alert( new method )}}} with it's advantages/shortcomings

* {{{caption(Embedded Domain Specific Languages)}}}

+ Consider the naive eDSL implemented as a {{{alert(algebriac data type)}}}:

#+BEGIN_SRC haskell :results value
data Exp
  = Add Exp Exp
  | Variable String
  | Constant Int
#+END_SRC

+ Expressions can be constructed in the eDSL like so

#+BEGIN_SRC haskell :results value
expr =
  let
    exp0 = Add (Variable "x") (Constant 0)
  in Add exp0 exp0
#+END_SRC

** {{{caption(Implementing eDSL Functionality)}}}

- DSL designers will commonly implement functionality like evaluation

#+BEGIN_SRC haskell :results value
eval (Add e0 e1) varMap = eval e0 + eval e1
eval (Variable lbl) varMap = lookup lbl varMap
eval (Constant c) varMap = c
#+END_SRC

- Or pretty printing

#+BEGIN_SRC haskell :results value
pretty (Add e0 e1) = "("++pretty e0++") + ("++pretty e1++")"
pretty (Variable lbl) = lbl
pretty (Constant c) = show c
#+END_SRC

** {{{caption(Finally Tagless Style)}}}

+ Data type based eDSL's have an {{{alert(extensibility issue)}}}, you can't extend the DSL
    operations without directly modifying the core library

+ We can redefine our eDSL in {{{alert(Finally Tagless Style)}}} (of Carette et al.) to solve this issue

#+BEGIN_SRC haskell :results value
class Exp repr where
  variable :: String -> repr Int
  constant :: String -> repr Int
  add :: repr Int -> repr Int -> repr Int
#+END_SRC

** {{{caption( Generating an AST from Finally Tagless )}}}
+ We can easily {{{alert( generate an AST )}}} from our new interface
   
#+BEGIN_SRC haskell :results value
data AST a
  = Op2 String (AST a) (AST a)
  | Variable String
  | Constant a

instance Exp AST where
  add = Op2 "Add"
  variable = Variable
  constant = Constant
#+END_SRC

+ Or we can generate more {{{alert( generic graph strutures )}}} (bipartite graphs,
  hypergraphs, etc)

* {{{caption(The Observable Sharing Problem)}}}

+ Consider the following DSL code

#+BEGIN_SRC haskell :results value
expr =
  let
    exp0 = add (variable "x") (constant 0)
  in add expr0 expr0
#+END_SRC

+ It generates the {{{alert(Abstract Syntax Tree)}}}
#+begin_src mermaid :file AST0.png
graph TB;
    Add0[Add]-->V0[x]
    Add0-->C0[0]
    Add1[Add]-->V1[x]
    Add1-->C1[0]
    Add2[Add]-->Add0
    Add2-->Add1
#+end_src
#+RESULTS:
[[file:AST0.png]]


** {{{caption(The Observable Sharing Problem)}}}

+ Or does it generate the {{{alert(Directed Acyclic Graph)}}}?
#+begin_src mermaid :file AST1.png
graph TB;
    Add0[Add]-->V0[x]
    Add0-->C0[0]
    Add2[Add]-->Add0
    Add2-->Add0
#+end_src
#+RESULTS:
   #+ATTR_HTML: :width 15%
[[file:AST1.png]]

** {{{caption(When Haskell's Sharing Is Insufficient)}}}

+ What if we want to ~perform code generation~, for example
  
#+BEGIN_SRC haskell :results value
> codegen [] expr :: AST Float
CodeGen (["exp0 = x + 0"
         ,"exp1 = exp0 + exp0"])
#+END_SRC

+ Creating such a code generator over an AST will involve having to {{{alert(identify common subexpressions)}}}
  
#+BEGIN_SRC haskell :results value
codegen codeList (Op2 lbl e0 e1) = ...
#+END_SRC

+ We need to create references for e0,e1, how do we identify if they are the same?
  
** {{{caption(Generating a Directed Acyclic Graph)}}}

+ To observe sharing, we need a {{{alert(Directed Acyclic Graph)}}} (i.e., DAG)

+ But how would we generate a DAG that explicitly identifies sharing
#+BEGIN_SRC haskell :results value

type NodeId = Int
data Node a = NConst a
            | NVar String
            | NAdd NodeId NodeId

newtype DAG a = Map NodeId (Node a)

instance Exp DAG where
  variable x = -- how do we generate a unique NodeID?
  ...
#+END_SRC

** {{{caption(Generating Unique Identifiers)}}}

+ We can use the {{{alert(State Monad)}}} to keep track of a counter and create a
  {{{alert(unique NodeId)}}}
#+BEGIN_SRC haskell :results value

newtype Graph a = Graph { unGraph :: State (DAG,Int) NodeId }

instance Exp Graph where
  add e1 e2 = Graph (do h1 <- unGraph e1
                        h2 <- unGraph e2
                        insertNode $ NAdd h1 h2)
  ...
insertNode n = do (DAG m,cnt) <- get
                  put (DAG (insert cnt n m),cnt+1)
#+END_SRC

+ However, this still doesn't identify common subexpressions

* {{{caption(Previous Work: Hash-Consing)}}}

+ {{{alert(Oleg Kiselyov)}}} presented a solution to this via the method of hash-consing

#+BEGIN_SRC haskell :results value
instance Exp Graph where
  add e1 e2 = Graph (do h1 <- unGraph e1
                        h2 <- unGraph e2
                        hashcons $ NAdd h1 h2)
  ...
hashcons :: Node -> State DAG NodeID
hashcons e = do
  (DAG m,cnt) <- get
  case lookup_key e m of
    Nothing -> let (k,m') = insert e m
               in put (DAG m',cnt+1) >> return k
    Just k -> return k
#+END_SRC

** {{{caption(Limitations of Hash-Consing)}}}

+ The problem with just Hash-Consing, is every time a value is shared it's {{{alert(AST is re-traversed)}}}, performing a lookup check at each node
  
+ Consider the following example
 
#+BEGIN_SRC haskell :results value
addChains =
  let
    x0 = variable "x"
    x1 = add x0 x0
    x2 = add x1 x1
    ...
  in xn
#+END_SRC 

** {{{caption(Limitations of HashConsing)}}}

+ This leads to an exponential scaling of hash-cons operations
  [[file:hashconscmp.png]]

** {{{caption(Explicit Sharing)}}}

+ Kiselyov noted this issue, and proposed a solution, {{{alert(explicit sharing)}}} via a
  custom let construct
  
#+BEGIN_SRC haskell :results value
class ExpLet repr where
  let_ :: repr a -> (repr a -> repr b) -> repr b
  
instance ExpLet Graph where
  let_ e f = Graph (do x <- unGraph e
                     unGraph $ f (Graph (return x)))
#+END_SRC

+ We can now {{{alert(redefine the example)}}} from before with explicit sharing
 
#+BEGIN_SRC haskell :results value
addChains x =
  let_ x (\x0 ->
  let_ (add x0 x0)  (\x1 ->
  let_ (add x1 x1)  (\x2 ->
   ...
  )))
#+END_SRC

** {{{caption(Limitations of Explicit Sharing)}}}
 
+ This method does not work for DSL functions that {{{alert(return multiple outputs)}}}
 
#+BEGIN_SRC haskell :results value
class Exp repr where
  variable :: String -> repr Int
  constant :: String -> repr Int
  add :: repr Int -> repr Int -> repr Int
  novel :: (repr Int,repr Int) -> (repr Int,repr Int)
#+END_SRC

+ The problem is that DAG generation requires {{{alert(splitting the state monad in two)}}}

#+BEGIN_SRC haskell :results value
instance Exp Graph where
  ...
  novel e1 e2 = let
     g1 = Graph (do h1 <- unGraph e1
                    h2 <- unGraph e2
                    hashcons $ Novel1 h1 h2)
     g2 = Graph (do h1 <- unGraph e1
                    h2 <- unGraph e2
                    hashcons $ Novel2 h1 h2)
     in (g1,g2)
#+END_SRC

* {{{caption(My Method, Via Trie Memoizing)}}}

+ My proposed solution is to build a {{{alert(serialized AST using byte strings)}}} for each
  node {{{alert(alongside the State Monad)}}}
  
#+BEGIN_SRC haskell :results value
data DAG = DAG { unTrie :: Trie (Node,NodeID), maxID :: NodeID }

data Graph a = Graph { unGraph :: State DAG NodeID
                     , stringAST :: ByteString }
#+END_SRC

** {{{caption(Trie Consing)}}}
+ The method also {{{alert(performs hash-consing, but with a trie)}}}

#+BEGIN_SRC haskell :results value
triecons :: ByteString -> Node -> State DAG NodeID
triecons sAST node = do
  DAG trie maxID <- get
  case Trie.lookup sAST trie of
    Nothing -> let maxID' = maxID+1
                   trie' = Trie.insert sAST (node,maxID') trie
                in do put $ DAG trie' maxID'
                      return maxID'
    Just (_,nodeID) -> return nodeID
#+END_SRC

** {{{caption(Preventing redundant traversal)}}}
+ When we implement DAG generation, we {{{alert(build a serialized AST at each node)}}}
 
#+BEGIN_SRC haskell :results value
instance Exp Graph where
  add e1 e2 = let
      sAST = buildStringAST "nadd" [e1,e2]
      sT = do ns <- seqArgs [e1,e2]
              case ns of
                [n1,n2] -> triecons sAST $ NAdd n1 n2
    in Graph sT sAST
#+END_SRC

+ The key is {{{alert(preventing re-traversal of nodes)}}}
   
#+BEGIN_SRC haskell :results value
seqArgs :: [Graph a] -> State DAG [NodeID]
seqArgs inps = let
    seqArg (Graph sT sAST) =
      do DAG trie _ <- get
         case Trie.lookup sAST  trie of
           Nothing -> sT
           Just (_,nodeID) -> return nodeID
  in sequence $ map seqArg inps
#+END_SRC

** {{{caption(Limitations of Our Method)}}}

+ The serialized AST can {{{alert(consume a lot of memory)}}}
 
+ The {{{alert(addChains example)}}} from before now has exponential scaling in memory
  instead of computation

** {{{caption(Explicit Sharing)}}}

+ Just like Kiselyov, we add a method for {{{alert(explicit sharing)}}} (this time of memory)

#+BEGIN_SRC haskell :results value
class Substitute repr where
  subT :: ByteString -> repr a -> repr a
instance Substitute Graph where
  subT s' (Graph g s _) = Graph g s' (Just s)

exampleSubT x y = let
  z = subT "z" (add x y)
  in add z z
#+END_SRC

** {{{caption(Mapping Substitutions)}}}
+ This requires us to keep a {{{alert(map of substitutions)}}} along with our DAG
 
#+BEGIN_SRC haskell :results value
data DAG = DAG { dagTrie :: Trie (Node,NodeID)
               , dagSubMap :: Map ByteString ByteString
               , dagMaxID :: Int } 

data Graph a = Graph { unGraph :: State DAG NodeID
                     , unStringAST :: ByteString
                     , unSubT :: Maybe ByteString }
#+END_SRC

* {{{caption(Comparing our methods: addChains)}}}

    | HashCons time  | 0.0 secs | 0.0 secs | 0.01 secs | 0.03 secs |
    | HashCons alloc | 0.62 MB  | 0.74 MB  | 28.67 MB  | 155.99 MB |
    | TrieCons time  | 0.0 secs | 0.0 secs | 0.03 secs | 0.16 secs |
    | TrieCons alloc | 1.77 MB  | 2.33 MB  | 129.14 MB | 723.43 MB |

** {{{caption(Real World Benchmarks)}}}

+ We implemented both methods on our DSL {{{alert(COCONUT)}}}, a high level assembly
  language similar to LLVM

#+BEGIN_SRC haskell :results value
class CoreISA repr where
  -- | Load from memory into a GPR
  ldMR :: repr MR -> Int -> (repr GPR, repr MR)
  -- | Store a GPR into memory
  stdMR   :: repr MR -> Int -> repr GPR -> repr MR
  -- | Bitwise NAND of two 64-bit general-purpose registers (NNGRK)
  nandG   :: repr GPR -> repr GPR -> repr GPR
  -- | Bitwise NOR of two 64-bit general-purpose registers (NOGRK)
  norG    :: repr GPR -> repr GPR -> repr GPR
  -- | Bitwise NXOR of two 64-bit general-purpose registers (NXGRK)
  eqvG    :: repr GPR -> repr GPR -> repr GPR
  -- | Addition of two 64-bit general-purpose registers (AGRK)
  addG    :: repr GPR -> repr GPR -> repr GPR
  ...
#+END_SRC

** {{{caption(Coconut DSL)}}}

+ We can use this language to encode basic blocks in {{{alert(Single Static Assignment)}}}
  form
   
#+BEGIN_SRC haskell :results value
add2 :: CoreISA repr => (repr GPR, repr GPR) -> (repr GPR, repr GPR)
add2 (a, b) =
    let
        a' = addG a b
        b' = addG a' b
    in (a', b')
#+END_SRC

   
** {{{caption(HashCons vs TrieCons)}}}
   #+ATTR_HTML: :width 100%
   [[file:cos_profile_hashcons.png]]
   
** {{{caption(HashCons vs TrieCons)}}}

   #+ATTR_HTML: :width 100%
   [[file:cos_profile_triecons.png]]

** {{{caption(Limitations Without Explicit Substitutions)}}}

   #+ATTR_HTML: :width 100%
   [[file:noexplicit.png]]

** {{{caption(Limitations Without Explicit Substitutions)}}}

   #+ATTR_HTML: :width 100%
   [[file:explicit.png]]


* {{{caption(Questions)}}}

#  LocalWords:  DSLs ASTs LocalWords eDSL Tagless eDSL's Carette al Haskell's
#  LocalWords:  NodeId Kiselyov Consing consing AST Trie Memoizing trie LLVM
#  LocalWords:  TrieCons alloc HashCons secs
